package TrabalhoPratico8;


import  java.sql.Connection ;
import  java.sql.DriverManager ;
import  java.sql.PreparedStatement ;
import  java.sql.ResultSet ;
import  java.sql.SQLException ;
import  java.sql.Statement ;

public  class CRUDRH{
    // cria o objeto do tipo conexão
    private Connection conexao ;
     
    public  CRUDRH ( Connection  conexao ) {
        this.conexao = conexao;
    }
    
    public  boolean  adicionarFuncionario ( String  nome , int  id ) {
        try {
            // O código SQL pode ser qualquer um, nesse caso é devido à construção do CRUD
            Statement statement =  this.conexao.createStatement ();
            statement.executeUpdate ( " INSERT INTO Funcionario VALUES (' " + nome + " ', " + id + " ) " );
            
            System.out.println(nome + " - " + id + " foi adicionado com sucesso " );
            return  true ;
            
        } catch ( SQLException e) {
            return  false ;
        }
    
    }
    
    public  void  adicionarFuncionario ( Funcionario  funcionario ) {
        try {
            PreparedStatement stmt = conexao.prepareStatement ( " INSERT INTO FUNCIONARIO (nome, id) VALUES (?,?) " );
            
            stmt.setString (1, funcionario.getNome());
            stmt.setInt (2, funcionario. getId ());
            
            stmt.execute ();
            stmt.close();
            
            System.out.println( " O funcionario (a) " + funcionario.getNome () + " foi adicionado com sucesso " );
            
        } catch ( SQLException e) {
            throw new  RuntimeException (e);
        }
                      
    }
   
    public  boolean  pesquisandoFunionario ( int  id ) {
        try {
            Statement statement =  this.conexao.createStatement ();
            ResultSet rs = statement.executeQuery ( " SELECT * FROM Funcionario WHERE Id = " + id);

            while (rs.next ()) {
                Integer Id = rs.getInt ("Id");
                String nome = rs.getString ( " nome " );

                System.out.println( " Id " + id + " pertence ao funcionario (a) "  + nome);
            }
            
            return  true ;
        } catch ( SQLException e) {
            return  false ;
        }
    }
    
    public  boolean  atualizarFuncionario ( String  novoNome , int  id ) {
        try {
            Statement statement =  this.conexao.createStatement ();
            statement.executeUpdate ( " UPDATE Funcionario SET nome = ' " + novoNome + " ' WHERE id = " + id);
            
            System.out.println( " O nome do funcionario (a) pertencente o id " + id + " foi alterado para " + novoNome);
            return  true ;
            
        } catch ( SQLException e) {
            return  false ;
        }
    }
    
    public  boolean  Funcionario ( int  id ) {
        try {
            Statement statement =  this.conexao.createStatement ();
            statement.executeUpdate ( " DELETE FROM Funcionario WHERE id = " + id + " " );
            
            System.out.println( " Funcionario (a) de id " + id + " foi construída " );
            return  true ;
        } catch ( SQLException e) {
            return  false ;
        }
    }
    public  void  adicionarListaFuncionario ( Funcionario [] Funcionarios ) {
        for( int i = 0 ; i < 5 ; i ++ ) {
            //adicionarFuncionario(Funionarios [i]);
        }
    }
    public  void  pesquisarCampo ( String  campo ) {
        try {
            Statement statement =  this.conexao.createStatement ();
            ResultSet rs = statement.executeQuery ( " SELECT * FROM Funcionario WHERE Nome LIKE '% " + campo + " %' " );
        
            while (rs . next ()) {
                Integer id = rs . getInt ( " id " );
                String nome = rs . getString ( " nome " );

                
                System.out.println( " Id " + id + " | Funcionario (a) "  + nome);
                
            }
        }
            // System.out.println ("O aluno (a)" + aluno.getNome () + "foi adicionado com sucesso");    
         catch ( SQLException e) {
            throw new RuntimeException (e);
        }
    }
}
